// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum ExecutionStatus {
  SUCCESS
  FAILURE
}


enum FlowStatus {
  ACTIVE
  PAUSED
  DRAFT
}

model User {
  id            String    @id
  email         String    @unique
  firstName     String?
  lastName      String?
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  clerkId       String    @unique
  flows         Flow[]
  organizations OrganizationMember[]
  executions    WorkflowExecution[] // New: reverse lookup
}

model Organization {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  clerkOrgId  String    @unique
  members     OrganizationMember[]
  flows       Flow[]
}

model OrganizationMember {
  id             String       @id @default(cuid())
  role           String       // "ADMIN" | "MEMBER"
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
}

model Flow {
  id             String       @id @default(cuid())
  name           String
  description    String?
  data           Json         // LangGraph structure
  status         FlowStatus   @default(ACTIVE)
  successRate    Float        @default(100.0)
  executions     Int          @default(0)
  failures       Int          @default(0)
  lastRunAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  isPublic       Boolean      @default(false)
  testData       Json?        // Optional input to test
  executionsLog  WorkflowExecution[]
}


model WorkflowExecution {
  id          String   @id @default(cuid())
  status      ExecutionStatus
  executedAt  DateTime @default(now())
  durationMs  Int?
  inputData   Json?
  outputData  Json?
  error       String?

  flow        Flow     @relation(fields: [flowId], references: [id])
  flowId      String

  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

